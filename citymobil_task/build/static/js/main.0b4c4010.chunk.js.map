{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","undefined","columnToSort","setColumnToSort","ascending","setAscending","carsData","setCarsData","inputValue","setInputValue","filterString","setFilterString","carInfoString","setCarInfoString","useEffect","axios","then","res","data","allColumnNames","tariffs_list","unsortedRows","cars","map","car","carIndex","mark","model","tariffName","tariffIndex","tariffData","tariffs","year","unfilteredRows","sort","a","b","columnToSortIndex","indexOf","aValue","bValue","filteredRows","length","filter","cells","i","String","toLowerCase","includes","className","type","placeholder","onChange","event","target","value","onClick","preventDefault","trim","columnName","columnIndex","scope","sortBy","row","cellName","cellIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b4c4010.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\n\n\nfunction App() {\n    const dataUrl = 'https://city-mobil.ru/api/cars';\n\n    const [columnToSort, setColumnToSort] = useState(undefined);\n    const [ascending, setAscending] = useState(true);\n    const [carsData, setCarsData] = useState(null);\n    const [inputValue, setInputValue] = useState(\"\");\n    const [filterString, setFilterString] = useState(\"\");\n    const [carInfoString, setCarInfoString] = useState(\"\");\n\n\n    useEffect(() => {\n        axios(dataUrl).then((res) => {\n            setCarsData(res.data)\n\n        })\n\n    }, []);\n\n    function sortBy(columnName) {\n        if (columnName !== columnToSort) {\n            setColumnToSort(columnName);\n            setAscending(true);\n        } else if (ascending) {\n            setAscending(false);\n        } else {\n            setColumnToSort(undefined);\n        }\n    }\n\n    if (!carsData) {\n        return 'Loading...'\n    }\n\n    const allColumnNames = ['Марка и модель', ...carsData.tariffs_list];\n    const unsortedRows = carsData.cars.map((car, carIndex) => {\n        return [\n            `${car.mark} ${car.model}`,\n            ...carsData.tariffs_list.map((tariffName, tariffIndex) => {\n                const tariffData = car.tariffs[tariffName];\n                if (tariffData) {\n                    return tariffData.year\n                } else {\n                    return \"-\"\n                }\n            })\n        ];\n    });\n\n    const unfilteredRows = columnToSort\n        ? unsortedRows.sort((a, b) => {\n            const columnToSortIndex = allColumnNames.indexOf(columnToSort);\n            const aValue = a[columnToSortIndex];\n            const bValue = b[columnToSortIndex];\n            if (ascending) {\n                if (bValue === \"-\") {\n                    return -1;\n                }\n                return aValue < bValue ? -1 : 1;\n            } else {\n                if (aValue === \"-\") {\n                    return 1;\n                }\n                return aValue < bValue ? 1 : -1;\n            }\n        })\n        : unsortedRows;\n    const filteredRows = filterString.length === 0 ? unfilteredRows : unfilteredRows.filter((cells) => {\n        for (let i = 0; i < cells.length; i++) {\n            if (String(cells[i]).toLowerCase().includes(filterString)) {\n                return true;\n            }\n        }\n        return false;\n    })\n    return (\n        <div className=\"container\">\n            <form className=\"form-inline\">\n                <div className=\"form-group mx-sm-3 mb-2\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Поиск\" onChange={(event) => {\n                        setInputValue(event.target.value);\n                    }}/>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary mb-2\" onClick={(event) => {\n                    event.preventDefault();\n                    setFilterString(inputValue.trim().toLowerCase());\n                }}>Найти\n                </button>\n            </form>\n            <table className=\"table\">\n                <thead>\n                <tr>\n                    {allColumnNames.map((columnName, columnIndex) => (\n                        <th key={columnIndex} scope=\"col\" onClick={() => sortBy(columnName)}>\n                            {`${columnName}${columnName === columnToSort ? ascending ? \" ↑\" : \" ↓\" : \"\"}`}\n                        </th>\n                    ))\n                    }\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    filteredRows.map((row, carIndex) => (\n                        <tr key={carIndex}>\n                            {\n                                row.map((cellName, cellIndex) => {\n                                    return <td key={cellIndex} onClick={()=>{\n                                        if(cellIndex===0) {\n                                            setCarInfoString(\"\")\n                                        }\n                                        else if (cellName===\"-\") {\n                                            setCarInfoString(\"\")\n                                        } else {\n                                            setCarInfoString(`Вы выбрали ${row[0]} ${cellName} года`)\n                                        }\n                                    }}>{cellName}</td>\n                                })\n                            }\n                        </tr>\n                    ))\n                }\n                </tbody>\n            </table>\n            {carInfoString ? <div>{carInfoString}</div> : null}\n        </div>\n    );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}